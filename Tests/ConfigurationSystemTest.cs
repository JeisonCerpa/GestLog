using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using GestLog.Services;
using GestLog.Services.Configuration;
using GestLog.ViewModels.Configuration;

namespace GestLog.Tests;

/// <summary>
/// Test de validaci√≥n para el sistema de configuraci√≥n unificado
/// Verifica la funcionalidad end-to-end del sistema de configuraci√≥n
/// </summary>
public class ConfigurationSystemTest
{
    private IConfigurationService? _configService;
    private ConfigurationViewModel? _viewModel;
    private IGestLogLogger? _logger;

    /// <summary>
    /// Ejecuta todas las pruebas del sistema de configuraci√≥n
    /// </summary>
    public async Task<bool> RunAllTestsAsync()
    {
        try
        {
            // Inicializar servicios
            var serviceProvider = LoggingService.GetServiceProvider();
            _configService = serviceProvider.GetRequiredService<IConfigurationService>();
            _logger = serviceProvider.GetRequiredService<IGestLogLogger>();
            _viewModel = new ConfigurationViewModel(_configService, _logger);

            _logger.LogInformation("üß™ Iniciando tests del sistema de configuraci√≥n");            // Ejecutar tests individuales
            var tests = new (string testName, Func<Task<bool>> testMethod)[]
            {
                ("Inicializaci√≥n de servicios", TestServiceInitialization),
                ("Carga de configuraci√≥n", TestConfigurationLoad),
                ("Guardado de configuraci√≥n", TestConfigurationSave),
                ("Validaci√≥n de configuraci√≥n", TestConfigurationValidation),
                ("ViewModel funcional", TestViewModelFunctionality),
                ("Exportaci√≥n/Importaci√≥n", TestExportImport),
                ("Restauraci√≥n por defecto", TestResetToDefaults)
            };

            int passed = 0;
            int failed = 0;

            foreach (var (testName, testMethod) in tests)
            {
                try
                {
                    _logger.LogInformation("üîÑ Ejecutando test: {TestName}", testName);
                    var result = await testMethod();
                    
                    if (result)
                    {
                        _logger.LogInformation("‚úÖ Test PAS√ì: {TestName}", testName);
                        passed++;
                    }                    else
                    {
                        _logger.LogError(new InvalidOperationException($"Test fall√≥: {testName}"), 
                            "‚ùå Test FALL√ì: {TestName}", testName);
                        failed++;
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "üí• Test EXPLOT√ì: {TestName}", testName);
                    failed++;
                }
            }

            var totalTests = passed + failed;
            var successRate = (double)passed / totalTests * 100;

            _logger.LogInformation("üìä Resultados de tests: {Passed}/{Total} pasaron ({SuccessRate:F1}%)", 
                passed, totalTests, successRate);

            return failed == 0;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "üí• Error cr√≠tico durante la ejecuci√≥n de tests");
            return false;
        }
    }    /// <summary>
    /// Test 1: Verifica que los servicios se inicialicen correctamente
    /// </summary>
    private async Task<bool> TestServiceInitialization()
    {
        await Task.Delay(1); // Para hacer el m√©todo realmente async
        
        if (_configService == null)
        {
            _logger?.LogError(new InvalidOperationException("ConfigurationService no inicializado"), 
                "ConfigurationService no inicializado");
            return false;
        }

        if (_viewModel == null)
        {
            _logger?.LogError(new InvalidOperationException("ConfigurationViewModel no inicializado"), 
                "ConfigurationViewModel no inicializado");
            return false;
        }

        if (_logger == null)
        {
            Console.WriteLine("Logger no inicializado");
            return false;
        }

        // Verificar configuraci√≥n actual existe
        var currentConfig = _configService.Current;
        if (currentConfig == null)
        {
            _logger.LogError(new InvalidOperationException("Configuraci√≥n actual es nula"), 
                "Configuraci√≥n actual es nula");
            return false;
        }

        _logger.LogDebug("‚úÖ Servicios inicializados correctamente");
        return true;
    }

    /// <summary>
    /// Test 2: Verifica la carga de configuraci√≥n
    /// </summary>
    private async Task<bool> TestConfigurationLoad()
    {
        await _configService!.LoadAsync();
        
        var config = _configService.Current;
          // Verificar que las secciones principales existen
        if (config.General == null)
        {
            _logger!.LogError(new InvalidOperationException("Secci√≥n General no cargada"), 
                "Secci√≥n General no cargada");
            return false;
        }

        if (config.UI == null)
        {
            _logger!.LogError(new InvalidOperationException("Secci√≥n UI no cargada"), 
                "Secci√≥n UI no cargada");
            return false;
        }

        if (config.Logging == null)
        {
            _logger!.LogError(new InvalidOperationException("Secci√≥n Logging no cargada"), 
                "Secci√≥n Logging no cargada");
            return false;
        }

        if (config.Performance == null)
        {
            _logger!.LogError(new InvalidOperationException("Secci√≥n Performance no cargada"), 
                "Secci√≥n Performance no cargada");
            return false;
        }

        if (config.Modules == null)
        {
            _logger!.LogError(new InvalidOperationException("Secci√≥n Modules no cargada"), 
                "Secci√≥n Modules no cargada");
            return false;
        }

        _logger!.LogDebug("‚úÖ Configuraci√≥n cargada con todas las secciones");
        return true;
    }

    /// <summary>
    /// Test 3: Verifica el guardado de configuraci√≥n
    /// </summary>
    private async Task<bool> TestConfigurationSave()
    {
        // Modificar un valor
        var originalValue = _configService!.Current.General.ApplicationName;
        _configService.Current.General.ApplicationName = "Test GestLog";
        
        await _configService.SaveAsync();
        
        // Recargar y verificar
        await _configService.LoadAsync();
          if (_configService.Current.General.ApplicationName != "Test GestLog")
        {
            _logger!.LogError(new InvalidOperationException("Valor no se guard√≥ correctamente"), 
                "Valor no se guard√≥ correctamente");
            return false;
        }

        // Restaurar valor original
        _configService.Current.General.ApplicationName = originalValue;
        await _configService.SaveAsync();

        _logger!.LogDebug("‚úÖ Guardado y carga funcionan correctamente");
        return true;
    }

    /// <summary>
    /// Test 4: Verifica la validaci√≥n de configuraci√≥n
    /// </summary>
    private async Task<bool> TestConfigurationValidation()
    {
        var errors = await _configService!.ValidateAsync();
        
        // Forzar un error de validaci√≥n
        var originalFontSize = _configService.Current.UI.FontSize;
        _configService.Current.UI.FontSize = 200; // Valor inv√°lido
        
        var errorsWithInvalidValue = await _configService.ValidateAsync();
          if (errorsWithInvalidValue.Count() == 0)
        {
            _logger!.LogError(new InvalidOperationException("Validaci√≥n no detect√≥ valor inv√°lido"), 
                "Validaci√≥n no detect√≥ valor inv√°lido");
            return false;
        }

        // Restaurar valor v√°lido
        _configService.Current.UI.FontSize = originalFontSize;
        
        var errorsAfterFix = await _configService.ValidateAsync();
        
        _logger!.LogDebug("‚úÖ Sistema de validaci√≥n funciona correctamente");
        return true;
    }

    /// <summary>
    /// Test 5: Verifica la funcionalidad del ViewModel
    /// </summary>
    private async Task<bool> TestViewModelFunctionality()
    {
        // Cargar configuraci√≥n en ViewModel
        await _viewModel!.LoadConfigurationCommand.ExecuteAsync(null);
          if (_viewModel.Configuration == null)
        {
            _logger!.LogError(new InvalidOperationException("ViewModel no carg√≥ la configuraci√≥n"), 
                "ViewModel no carg√≥ la configuraci√≥n");
            return false;
        }

        // Verificar secciones disponibles
        if (_viewModel.AvailableSections.Count == 0)
        {
            _logger!.LogError(new InvalidOperationException("ViewModel no tiene secciones disponibles"), 
                "ViewModel no tiene secciones disponibles");
            return false;
        }

        // Verificar cambio de secci√≥n
        _viewModel.ChangeSectionCommand.Execute("UI");
        
        if (_viewModel.SelectedSection != "UI")
        {
            _logger!.LogError(new InvalidOperationException("Cambio de secci√≥n no funcion√≥"), 
                "Cambio de secci√≥n no funcion√≥");
            return false;
        }

        _logger!.LogDebug("‚úÖ ViewModel funciona correctamente");
        return true;
    }

    /// <summary>
    /// Test 6: Verifica exportaci√≥n e importaci√≥n
    /// </summary>
    private async Task<bool> TestExportImport()
    {
        var tempExportFile = Path.GetTempFileName() + ".json";
        
        try
        {
            // Exportar configuraci√≥n actual
            await _configService!.ExportAsync(tempExportFile);
              if (!File.Exists(tempExportFile))
            {
                _logger!.LogError(new FileNotFoundException("Archivo de exportaci√≥n no se cre√≥"), 
                    "Archivo de exportaci√≥n no se cre√≥");
                return false;
            }

            // Modificar configuraci√≥n
            var originalName = _configService.Current.General.ApplicationName;
            _configService.Current.General.ApplicationName = "Imported Test";
            
            // Importar configuraci√≥n
            await _configService.ImportAsync(tempExportFile);
              if (_configService.Current.General.ApplicationName == "Imported Test")
            {
                _logger!.LogError(new InvalidOperationException("Importaci√≥n no restaur√≥ el valor original"), 
                    "Importaci√≥n no restaur√≥ el valor original");
                return false;
            }

            _logger!.LogDebug("‚úÖ Exportaci√≥n e importaci√≥n funcionan correctamente");
            return true;
        }
        finally
        {
            if (File.Exists(tempExportFile))
            {
                File.Delete(tempExportFile);
            }
        }
    }

    /// <summary>
    /// Test 7: Verifica restauraci√≥n a valores por defecto
    /// </summary>
    private async Task<bool> TestResetToDefaults()
    {
        // Modificar algunos valores
        _configService!.Current.General.ApplicationName = "Modified App";
        _configService.Current.UI.FontSize = 16;
          // Restaurar a valores por defecto
        await _configService.ResetToDefaultsAsync();
        
        // Verificar que los valores se restauraron
        if (_configService.Current.General.ApplicationName == "Modified App")
        {
            _logger!.LogError(new InvalidOperationException("Restauraci√≥n no cambi√≥ el nombre de la aplicaci√≥n"), 
                "Restauraci√≥n no cambi√≥ el nombre de la aplicaci√≥n");
            return false;
        }        _logger!.LogDebug("‚úÖ Restauraci√≥n a valores por defecto funciona correctamente");
#pragma warning disable CS0162
        return true;
#pragma warning restore CS0162
    }

    /// <summary>
    /// M√©todo est√°tico para ejecutar los tests desde cualquier lugar
    /// </summary>
    public static async Task<bool> RunTestsAsync()
    {
        var tester = new ConfigurationSystemTest();
        return await tester.RunAllTestsAsync();
    }
}
