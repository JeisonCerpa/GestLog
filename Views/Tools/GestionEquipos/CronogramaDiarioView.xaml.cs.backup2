using System.Windows.Controls;
using UserControl = System.Windows.Controls.UserControl;
using System.Windows;
using SystemUri = System.Windows.Application;
using System;
using GestLog.Services.Core.Logging;
using Microsoft.Extensions.DependencyInjection;
using System.Globalization;
using System.Windows.Controls.Primitives;

namespace GestLog.Views.Tools.GestionEquipos
{
    public partial class CronogramaDiarioView : UserControl
    {
        private DateTime _currentDisplayDate = DateTime.Now;        public CronogramaDiarioView()
        {
            try
            {
                InitializeComponent();
            }
            catch 
            {
                // Fallback al m√©todo original si InitializeComponent falla
                System.Windows.Application.LoadComponent(this, new Uri("/GestLog;component/Views/Tools/GestionEquipos/CronogramaDiarioView.xaml", UriKind.Relative));
            }
            this.Loaded += CronogramaDiarioView_Loaded;
        }

        private async void CronogramaDiarioView_Loaded(object? sender, RoutedEventArgs e)
        {
            try
            {
                if (DataContext == null)
                {
                    var sp = LoggingService.GetServiceProvider();
                    var vm = sp.GetService(typeof(GestLog.Modules.GestionEquiposInformaticos.ViewModels.CronogramaDiarioViewModel)) as GestLog.Modules.GestionEquiposInformaticos.ViewModels.CronogramaDiarioViewModel;
                    if (vm != null)
                        DataContext = vm;
                }

                if (DataContext is GestLog.Modules.GestionEquiposInformaticos.ViewModels.CronogramaDiarioViewModel vm2 && vm2.Planificados.Count == 0)
                {
                    await vm2.LoadAsync(System.Threading.CancellationToken.None);
                }

                // Inicializar calendario
                InitializeCalendar();
            }
            catch { }
        }

        private void InitializeCalendar()
        {
            try
            {
                // Configurar fecha inicial del calendario
                _currentDisplayDate = DateTime.Now;
                CalendarControl.DisplayDate = _currentDisplayDate;
                CalendarControl.SelectedDate = _currentDisplayDate;
                
                // Actualizar UI
                UpdateMonthYearText();
                UpdateSelectedWeekText(_currentDisplayDate);
            }
            catch { }
        }

        private void CalendarButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                CalendarPopup.IsOpen = !CalendarPopup.IsOpen;
            }
            catch { }
        }

        private void PrevMonthButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _currentDisplayDate = _currentDisplayDate.AddMonths(-1);
                CalendarControl.DisplayDate = _currentDisplayDate;
                UpdateMonthYearText();
            }
            catch { }
        }

        private void NextMonthButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _currentDisplayDate = _currentDisplayDate.AddMonths(1);
                CalendarControl.DisplayDate = _currentDisplayDate;
                UpdateMonthYearText();
            }
            catch { }
        }

        private void CalendarControl_SelectedDatesChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (CalendarControl.SelectedDate.HasValue)
                {
                    var selectedDate = CalendarControl.SelectedDate.Value;
                    UpdateSelectedWeekText(selectedDate);
                    UpdateViewModelWeek(selectedDate);
                    CalendarPopup.IsOpen = false;
                }
            }
            catch { }
        }

        private void UpdateMonthYearText()
        {
            try
            {
                var monthName = _currentDisplayDate.ToString("MMMM yyyy", new CultureInfo("es-ES"));
                MonthYearText.Text = monthName;
            }
            catch { }
        }

        private void UpdateSelectedWeekText(DateTime date)
        {
            try
            {
                var weekNumber = ISOWeek.GetWeekOfYear(date);
                var year = ISOWeek.GetYear(date);
                SelectedWeekText.Text = $"Semana {weekNumber}, {year}";
            }
            catch { }
        }

        private void UpdateViewModelWeek(DateTime date)
        {
            try
            {
                if (DataContext is GestLog.Modules.GestionEquiposInformaticos.ViewModels.CronogramaDiarioViewModel vm)
                {
                    var weekNumber = ISOWeek.GetWeekOfYear(date);
                    var year = ISOWeek.GetYear(date);
                    
                    // Actualizar ViewModel de forma segura sin crear ciclos
                    vm.SelectedWeek = weekNumber;
                    vm.SelectedYear = year;
                }
            }
            catch { }
        }
    }
}
