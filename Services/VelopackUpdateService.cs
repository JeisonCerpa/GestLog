using System;
using System.Diagnostics;
using System.Security.Principal;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using Velopack;
using Velopack.Windows;
using GestLog.Services.Core.Logging;

namespace GestLog.Services
{
    public class VelopackUpdateService
    {
        private readonly IGestLogLogger _logger;
        private readonly string _updateUrl;

        public VelopackUpdateService(GestLog.Services.Core.Logging.IGestLogLogger logger, string updateUrl)
        {
            _logger = logger;
            _updateUrl = updateUrl;
        }

        /// <summary>
        /// Verifica si hay actualizaciones disponibles SIN descargarlas
        /// </summary>
        public async Task<bool> CheckForUpdatesAsync()
        {
            try
            {
                _logger.LogDebug("üîç Verificando actualizaciones disponibles...");
                var updater = new UpdateManager(_updateUrl);
                var updateInfo = await updater.CheckForUpdatesAsync();
                
                if (updateInfo != null)
                {
                    var currentVersion = updater.CurrentVersion;
                    var availableVersion = updateInfo.TargetFullRelease?.Version;
                    
                    _logger.LogDebug($"üìã Versi√≥n actual: {currentVersion}, Versi√≥n disponible: {availableVersion}");
                    
                    // Solo devolver true si hay una versi√≥n NUEVA disponible
                    if (availableVersion != null && currentVersion != null && availableVersion > currentVersion)
                    {
                        _logger.LogInformation($"‚úÖ Nueva actualizaci√≥n disponible: {availableVersion} (actual: {currentVersion})");
                        return true;
                    }
                    else
                    {
                        _logger.LogDebug($"‚ÑπÔ∏è Ya tienes la versi√≥n m√°s reciente: {currentVersion}");
                        return false;
                    }
                }
                else
                {
                    _logger.LogDebug("‚ÑπÔ∏è No se encontr√≥ informaci√≥n de actualizaciones en el servidor");
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error verificando actualizaciones");
                return false;
            }
        }

        /// <summary>
        /// Descarga e instala las actualizaciones (muestra UI de progreso)
        /// </summary>
        public async Task DownloadAndInstallUpdatesAsync(Action<double>? onProgress = null)
        {
            try
            {
                _logger.LogInformation("üì• Iniciando descarga de actualizaciones...");
                var updater = new UpdateManager(_updateUrl);
                var updateInfo = await updater.CheckForUpdatesAsync();
                
                if (updateInfo != null)
                {
                    await updater.DownloadUpdatesAsync(updateInfo, progress =>
                    {
                        onProgress?.Invoke(progress);
                    });
                      _logger.LogInformation("üîÑ Preparando aplicaci√≥n de actualizaciones...");
                    
                    // Verificar si se necesitan privilegios de administrador
                    if (!IsRunningAsAdministrator())
                    {
                        _logger.LogInformation("üîê Se requieren privilegios de administrador para aplicar la actualizaci√≥n");
                        var elevated = await RestartAsAdministratorForUpdateAsync();
                        if (!elevated)
                        {
                            _logger.LogWarning("‚ö†Ô∏è Usuario cancel√≥ la elevaci√≥n de privilegios. Actualizaci√≥n cancelada.");
                            return;
                        }
                        // Si llegamos aqu√≠, la aplicaci√≥n se reiniciar√° con privilegios elevados
                        return;
                    }
                    
                    // Si ya tenemos privilegios, continuar con la actualizaci√≥n
                    _logger.LogInformation("üîÑ Aplicando actualizaciones y reiniciando...");
                    
                    // Programar el cierre controlado de la aplicaci√≥n
                    await ScheduleApplicationShutdownAsync();
                    
                    updater.ApplyUpdatesAndRestart(updateInfo);
                }
                else
                {
                    _logger.LogWarning("‚ö†Ô∏è No se encontraron actualizaciones para descargar");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error descargando/instalando actualizaciones");
                throw;
            }
        }

        /// <summary>
        /// Programa el cierre controlado de la aplicaci√≥n para permitir la actualizaci√≥n
        /// </summary>
        private async Task ScheduleApplicationShutdownAsync()
        {
            try
            {
                _logger.LogInformation("üîÑ Programando cierre controlado de la aplicaci√≥n...");
                
                // Dar tiempo para completar operaciones pendientes
                await Task.Delay(1000);
                
                // Forzar cierre de la aplicaci√≥n en el hilo principal
                System.Windows.Application.Current?.Dispatcher.BeginInvoke(new Action(() =>
                {
                    try
                    {
                        _logger.LogInformation("üîÑ Cerrando aplicaci√≥n para permitir actualizaci√≥n...");
                        System.Windows.Application.Current?.Shutdown();
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "‚ùå Error cerrando aplicaci√≥n");
                        // Forzar cierre del proceso si es necesario
                        Environment.Exit(0);
                    }
                }));
                
                // Dar tiempo adicional para que el cierre se procese
                await Task.Delay(2000);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error en el cierre programado");
                // Forzar cierre inmediato si hay problemas
                Environment.Exit(0);
            }
        }

        /// <summary>
        /// M√©todo legacy: Verifica, descarga e instala actualizaciones en una sola operaci√≥n
        /// </summary>
        public async Task<bool> CheckAndUpdateAsync(Action<double> onProgress, CancellationToken cancellationToken)
        {
            try
            {
                var updater = new UpdateManager(_updateUrl);
                var updateInfo = await updater.CheckForUpdatesAsync();
                if (updateInfo != null)
                {
                    await updater.DownloadUpdatesAsync(updateInfo, progress =>
                    {
                        onProgress?.Invoke(progress);
                    }, cancellationToken);
                    updater.ApplyUpdatesAndRestart(updateInfo);
                    _logger.LogDebug("Actualizaci√≥n aplicada. Reiniciando aplicaci√≥n...");
                    return true;
                }
                return false;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error en el proceso de actualizaci√≥n Velopack");
                return false;
            }
        }

        /// <summary>
        /// Verifica si la aplicaci√≥n se est√° ejecutando con privilegios de administrador
        /// </summary>
        private bool IsRunningAsAdministrator()
        {
            try
            {
                var identity = WindowsIdentity.GetCurrent();
                var principal = new WindowsPrincipal(identity);
                return principal.IsInRole(WindowsBuiltInRole.Administrator);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "No se pudo verificar privilegios de administrador");
                return false;
            }
        }

        /// <summary>
        /// Reinicia la aplicaci√≥n con privilegios de administrador para aplicar actualizaciones
        /// </summary>
        private async Task<bool> RestartAsAdministratorForUpdateAsync()
        {
            try
            {
                _logger.LogInformation("üîê Solicitando privilegios de administrador para aplicar actualizaci√≥n...");
                  var result = System.Windows.MessageBox.Show(
                    "Para aplicar la actualizaci√≥n, GestLog necesita permisos de administrador.\n\n" +
                    "¬øDesea continuar? La aplicaci√≥n se reiniciar√° con privilegios elevados.",
                    "Permisos requeridos",
                    MessageBoxButton.YesNo,
                    MessageBoxImage.Question);

                if (result != MessageBoxResult.Yes)
                {
                    _logger.LogInformation("‚ùå Usuario cancel√≥ la elevaci√≥n de privilegios");
                    return false;
                }

                // Obtener la ruta del ejecutable actual
                var currentProcess = Process.GetCurrentProcess();
                var executablePath = currentProcess.MainModule?.FileName;                if (string.IsNullOrEmpty(executablePath))
                {
                    var errorMsg = "No se pudo obtener la ruta del ejecutable actual";
                    _logger.LogError(new InvalidOperationException(errorMsg), errorMsg);
                    return false;
                }

                // Configurar el proceso para ejecutar como administrador
                var startInfo = new ProcessStartInfo
                {
                    FileName = executablePath,
                    Arguments = "--apply-update", // Par√°metro para indicar que debe aplicar actualizaci√≥n
                    UseShellExecute = true,
                    Verb = "runas" // Solicita elevaci√≥n de privilegios
                };

                // Iniciar el proceso elevado
                var elevatedProcess = Process.Start(startInfo);
                
                if (elevatedProcess != null)
                {
                    _logger.LogInformation("‚úÖ Aplicaci√≥n reiniciada con privilegios de administrador");
                    
                    // Cerrar la instancia actual
                    await ScheduleApplicationShutdownAsync();
                    return true;
                }                else
                {
                    var errorMsg = "‚ùå No se pudo iniciar la aplicaci√≥n con privilegios elevados";
                    _logger.LogError(new InvalidOperationException(errorMsg), errorMsg);
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al reiniciar como administrador");
                return false;
            }
        }
    }
}
