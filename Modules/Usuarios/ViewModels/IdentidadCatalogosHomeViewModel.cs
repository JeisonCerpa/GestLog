using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Microsoft.Extensions.DependencyInjection;
using GestLog.Services.Core.Logging;
using Modules.Usuarios.ViewModels;
using ModulosUsuarios = global::Modules.Usuarios.ViewModels;

namespace GestLog.Modules.Usuarios.ViewModels
{
    public partial class IdentidadCatalogosHomeViewModel : ObservableObject
    {
        private readonly IGestLogLogger _logger;        public IdentidadCatalogosHomeViewModel()
        {
            var serviceProvider = LoggingService.GetServiceProvider();
            _logger = serviceProvider.GetRequiredService<IGestLogLogger>();
            _logger.LogInformation("üéØ IdentidadCatalogosHomeViewModel inicializado correctamente");
        }

        [RelayCommand]
        private async Task AbrirPersonas()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Personas");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(PersonaManagementViewModel)) as PersonaManagementViewModel;
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå PersonaManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Personas", "Error", 
                        System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                await viewModel.InicializarAsync();
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Personas.PersonaManagementView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Personas");
                    mainWindow.NavigateToView(view, "Gesti√≥n de Personas");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Personas");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Personas: {ex.Message}", "Error", 
                    System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void AbrirUsuarios()
        {            try
            {                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Usuarios");
                
                var serviceProvider = LoggingService.GetServiceProvider();                // Debug: verificar tipos registrados
                _logger.LogDebug("üîç Verificando registro de UsuarioManagementViewModel en DI");
                var viewModel = serviceProvider.GetRequiredService<global::Modules.Usuarios.ViewModels.UsuarioManagementViewModel>();
                
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå UsuarioManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Usuarios", "Error", 
                        System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }

                _logger.LogInformation("‚úÖ UsuarioManagementViewModel resuelto exitosamente desde DI");

                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Usuario.UsuarioManagementView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Usuarios");
                    mainWindow.NavigateToView(view, "Gesti√≥n de Usuarios");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Usuarios");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Usuarios: {ex.Message}", "Error", 
                    System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void AbrirCatalogos()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Cat√°logos");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(CatalogosManagementViewModel));
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå CatalogosManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Cat√°logos", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Catalogos.CatalogosManagementView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Cat√°logos");
                    mainWindow.NavigateToView(view, "Gesti√≥n de Cat√°logos");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Cat√°logos");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Cat√°logos: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void AbrirAuditoria()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Historial de Auditor√≠a");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(AuditoriaManagementViewModel));
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå AuditoriaManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Auditor√≠a", "Error", 
                        System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Auditoria.AuditoriaManagementView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Auditor√≠a");
                    mainWindow.NavigateToView(view, "Historial de Auditor√≠a");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Historial de Auditor√≠a");
                System.Windows.MessageBox.Show($"Error al abrir Historial de Auditor√≠a: {ex.Message}", "Error", 
                    System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private async Task AbrirCargos()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Cargos");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(CatalogosManagementViewModel)) as CatalogosManagementViewModel;
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå CatalogosManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Cargos", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                await viewModel.InitializeAsync();
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Catalogo.Cargos.CargosView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Cargos");
                    mainWindow.NavigateToView(view, "Gesti√≥n de Cargos");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Cargos");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Cargos: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private async Task AbrirTiposDocumento()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Tipos de Documento");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(CatalogosManagementViewModel)) as CatalogosManagementViewModel;
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå CatalogosManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Tipos de Documento", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                await viewModel.InitializeAsync();
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Catalogo.TipoDocumento.TipoDocumentoManagementView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Tipos de Documento");
                    mainWindow.NavigateToView(view, "Gesti√≥n de Tipos de Documento");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Tipos de Documento");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Tipos de Documento: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void AbrirRoles()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Roles");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(RolManagementViewModel));
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå RolManagementViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Roles", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Catalogo.Roles.RolesView { DataContext = viewModel };
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Roles");
                    mainWindow.NavigateToView(view, "Gesti√≥n de Roles");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Roles");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Roles: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }

        [RelayCommand]
        private void AbrirGestionPermisosRol()
        {
            try
            {
                _logger.LogInformation("üß≠ Navegando a Gesti√≥n de Permisos por Rol");
                var serviceProvider = LoggingService.GetServiceProvider();
                var viewModel = serviceProvider.GetService(typeof(GestionPermisosRolViewModel));
                if (viewModel == null)
                {
                    _logger.LogWarning("‚ùå GestionPermisosRolViewModel no se pudo resolver desde DI");
                    System.Windows.MessageBox.Show("Error: No se pudo cargar el m√≥dulo de Gesti√≥n de Permisos por Rol", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    return;
                }
                var view = new GestLog.Views.Tools.GestionIdentidadCatalogos.Catalogo.Permisos.GestionPermisosRolView();
                view.DataContext = viewModel;
                var mainWindow = System.Windows.Application.Current.MainWindow as GestLog.MainWindow;
                if (mainWindow != null)
                {
                    _logger.LogInformation("‚úÖ Navegando a vista de Gesti√≥n de Permisos por Rol");
                    mainWindow.NavigateToView(view as System.Windows.Controls.UserControl, "Gesti√≥n de Permisos por Rol");
                }
                else
                {
                    _logger.LogWarning("‚ùå MainWindow no encontrada");
                }
            }
            catch (System.Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al abrir Gesti√≥n de Permisos por Rol");
                System.Windows.MessageBox.Show($"Error al abrir Gesti√≥n de Permisos por Rol: {ex.Message}", "Error", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
            }
        }
    }
}
