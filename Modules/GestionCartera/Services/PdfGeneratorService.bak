using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using ClosedXML.Excel;
using System.Globalization;
using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;
using iText.Kernel.Pdf.Canvas;
using iText.IO.Image;
using iText.Kernel.Events;
using iText.Kernel.Geom;
using GestLog.Services.Core.Logging;

// Resolver ambigüedades de tipos
using Rectangle = iText.Kernel.Geom.Rectangle;
using Path = System.IO.Path;
using System.Linq;

namespace GestLog.Modules.GestionCartera.Services;

/// <summary>
/// Manejador para agregar imagen de fondo a los PDFs
/// </summary>
public class BackgroundImageHandler : IEventHandler
{
    private readonly ImageData backgroundImage;
    private readonly IGestLogLogger _logger;

    public BackgroundImageHandler(string imagePath, IGestLogLogger logger)
    {
        _logger = logger;
        
        if (File.Exists(imagePath))
        {
            try
            {
                backgroundImage = ImageDataFactory.Create(imagePath);
                _logger.LogInformation("Plantilla de fondo cargada correctamente: {ImagePath}", imagePath);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al cargar la imagen de fondo: {ImagePath}", imagePath);
                throw;
            }
        }
        else
        {
            throw new FileNotFoundException($"No se encontró el archivo de plantilla: {imagePath}");
        }
    }

    public void HandleEvent(Event @event)
    {
        if (@event is PdfDocumentEvent docEvent)
        {
            PdfDocument pdf = docEvent.GetDocument();
            PdfPage page = docEvent.GetPage();
            Rectangle pageSize = page.GetPageSize();
            
            PdfCanvas canvas = new PdfCanvas(page.NewContentStreamBefore(), page.GetResources(), pdf);
            
            try
            {
                canvas.AddImageFittedIntoRectangle(backgroundImage, pageSize, false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error al dibujar fondo en PDF");
            }
            finally
            {
                canvas.Release();
            }
        }
    }
}

/// <summary>
/// Implementación del servicio de generación de PDFs adaptado para la estructura de Excel de MiProyectoWPF
/// </summary>
public class PdfGeneratorService : IPdfGeneratorService
{
    private readonly IGestLogLogger _logger;
    private readonly List<GeneratedPdfInfo> _generatedPdfs = new();
    private const int EXCEL_HEADER_ROW = 4; // La fila 4 es el encabezado en el formato original

    public PdfGeneratorService(IGestLogLogger logger)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<bool> ValidateExcelStructureAsync(string excelFilePath)
    {
        try
        {
            if (!File.Exists(excelFilePath))
            {
                _logger.LogWarning("Archivo Excel no encontrado en: {FilePath}", excelFilePath);
                return false;
            }

            bool result = false;
            
            await Task.Run(() => {
                try
                {
                    using var workbook = new XLWorkbook(excelFilePath);
                    var worksheet = workbook.Worksheets.FirstOrDefault();
                    
                    if (worksheet == null)
                    {
                        _logger.LogWarning("El archivo Excel no contiene hojas de trabajo");
                        return;
                    }
                    
                    // Verificar que hay contenido en el Excel
                    if (!worksheet.CellsUsed().Any())
                    {
                        _logger.LogWarning("El archivo Excel está vacío");
                        return;
                    }

                    // En el proyecto original, las cabeceras están en la fila 4
                    var headerRow = worksheet.Row(EXCEL_HEADER_ROW);
                    
                    if (!headerRow.CellsUsed().Any())
                    {
                        _logger.LogWarning("La fila de encabezados está vacía");
                        return;
                    }

                    // Buscar columnas clave según el formato original (como se ve en SimplePdfGenerator.cs)
                    var columns = headerRow.CellsUsed().Select(c => c.Value.ToString()).ToList();
                    _logger.LogInformation("Columnas encontradas en fila {Row}: {Columns}", 
                        EXCEL_HEADER_ROW, string.Join(", ", columns));

                    // Verificar si tiene las columnas esenciales del formato original
                    bool hasNombres = columns.Any(c => c.Contains("Nombres", StringComparison.OrdinalIgnoreCase));
                    bool hasIdentificacion = columns.Any(c => c.Contains("Identificacion", StringComparison.OrdinalIgnoreCase));
                    bool hasValorTotal = columns.Any(c => 
                        c.Contains("Valor Total", StringComparison.OrdinalIgnoreCase) || 
                        c.Contains("ValorTotal", StringComparison.OrdinalIgnoreCase));

                    _logger.LogInformation("Validación de columnas - Nombres: {HasNombres}, Identificacion: {HasId}, Valor: {HasValor}",
                        hasNombres, hasIdentificacion, hasValorTotal);
                        
                    // Si no encuentra las columnas principales
                    if (!hasNombres || !hasIdentificacion || !hasValorTotal)
                    {
                        _logger.LogWarning("El Excel no tiene la estructura esperada. Faltan columnas obligatorias.");
                        _logger.LogWarning("Debe incluir columnas: Nombres, Identificacion y Valor Total");
                        return;
                    }
                    
                    // Verificar que hay datos después de la fila de encabezado
                    int dataRowCount = worksheet.RowsUsed().Count(r => r.RowNumber() > EXCEL_HEADER_ROW);
                    
                    if (dataRowCount == 0)
                    {
                        _logger.LogWarning("El archivo Excel no contiene datos después del encabezado");
                        return;
                    }
                    
                    _logger.LogInformation("Validación exitosa. El archivo contiene {Count} registros de datos", dataRowCount);
                    result = true;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Error procesando Excel: {Path}", excelFilePath);
                }
            });
            
            return result;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error al validar estructura del Excel: {FilePath}", excelFilePath);
            return false;
        }
    }

    public async Task<IEnumerable<string>> GetCompaniesPreviewAsync(string excelFilePath)
    {
        try
        {
            return await Task.Run(() =>
            {
                var companies = new HashSet<string>();
                
                using var workbook = new XLWorkbook(excelFilePath);
                var worksheet = workbook.Worksheets.FirstOrDefault();
                
                if (worksheet == null)
                    return Enumerable.Empty<string>();

                // Usar la fila 4 como encabezado según el formato original
                var headerRow = worksheet.Row(EXCEL_HEADER_ROW);
                var nombresColumnIndex = -1;
                
                // Buscar la columna "Nombres"
                foreach (var cell in headerRow.CellsUsed())
                {
                    var cellValue = cell.Value.ToString();
                    if (cellValue.Contains("Nombres", StringComparison.OrdinalIgnoreCase) && 
                        !cellValue.Contains("Etiqueta", StringComparison.OrdinalIgnoreCase))
                    {
                        nombresColumnIndex = cell.Address.ColumnNumber;
                        _logger.LogInformation("Columna 'Nombres' encontrada en posición {Index}", nombresColumnIndex);
                        break;
                    }
                }

                if (nombresColumnIndex <= 0)
                {
                    _logger.LogWarning("No se pudo encontrar la columna 'Nombres' en el Excel");
                    return Enumerable.Empty<string>();
                }

                // Leer los nombres de empresa desde la fila 5 en adelante
                foreach (var row in worksheet.RowsUsed())
                {
                    // Saltarse las filas de encabezado
                    if (row.RowNumber() <= EXCEL_HEADER_ROW)
                        continue;
                        
                    // Leer el valor de la columna Nombres
                    var companyName = row.Cell(nombresColumnIndex).Value.ToString()?.Trim();
                    
                    // Solo agregar si es un nombre válido (no total, no vacío)
                    if (!string.IsNullOrEmpty(companyName) && 
                        !companyName.Contains("Total", StringComparison.OrdinalIgnoreCase) &&
                        !companyName.Equals("Cliente", StringComparison.OrdinalIgnoreCase))
                    {
                        companies.Add(companyName);
                    }
                }

                _logger.LogInformation("Se encontraron {Count} empresas en el Excel", companies.Count);
                return companies.OrderBy(c => c);
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error al obtener vista previa de empresas: {FilePath}", excelFilePath);
            return Enumerable.Empty<string>();
        }
    }

    // El resto de métodos pueden permanecer sin cambios...
    public async Task<IReadOnlyList<GeneratedPdfInfo>> GenerateEstadosCuentaAsync(
        string excelFilePath, 
        string outputFolder,
        string? templatePath = null,
        IProgress<(int current, int total, string status)>? progress = null,
        CancellationToken cancellationToken = default)
    {
        _generatedPdfs.Clear();
        
        try
        {
            _logger.LogInformation("🚀 Iniciando generación de estados de cuenta desde: {ExcelFilePath}", excelFilePath);
            
            // Validar archivo de entrada
            if (!File.Exists(excelFilePath))
            {
                throw new FileNotFoundException($"No se encontró el archivo Excel: {excelFilePath}");
            }

            // Crear directorio de salida si no existe
            if (!Directory.Exists(outputFolder))
            {
                Directory.CreateDirectory(outputFolder);
                _logger.LogInformation("📁 Directorio de salida creado: {OutputFolder}", outputFolder);
            }

            progress?.Report((0, 0, "Leyendo archivo Excel..."));

            // Usar la implementación actualizada para leer los datos del Excel con formato MiProyectoWPF
            var empresasData = await ReadExcelDataAsync(excelFilePath, cancellationToken);
            
            if (!empresasData.Any())
            {
                _logger.LogWarning("No se encontraron datos válidos en el archivo Excel");
                return _generatedPdfs.AsReadOnly();
            }

            _logger.LogInformation("📊 Se encontraron {Count} empresas para procesar", empresasData.Count);

            // Generar PDFs para cada empresa
            int current = 0;
            int total = empresasData.Count;

            foreach (var empresa in empresasData)
            {
                cancellationToken.ThrowIfCancellationRequested();
                
                current++;
                progress?.Report((current, total, $"Generando PDF para {empresa.Key}..."));

                try
                {
                    var pdfInfo = await GeneratePdfForCompanyAsync(
                        empresa.Key, 
                        empresa.Value, 
                        outputFolder, 
                        templatePath,
                        cancellationToken);
                    
                    if (pdfInfo != null)
                    {
                        _generatedPdfs.Add(pdfInfo);
                        _logger.LogInformation("✅ PDF generado exitosamente para {Company}: {FilePath}", 
                            empresa.Key, pdfInfo.FilePath);
                    }
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "❌ Error al generar PDF para empresa {Company}", empresa.Key);
                }
            }

            progress?.Report((total, total, "Generación completada"));
            _logger.LogInformation("🎉 Generación completada. {Count} PDFs generados exitosamente", _generatedPdfs.Count);

            return _generatedPdfs.AsReadOnly();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "❌ Error durante la generación de estados de cuenta");
            throw;
        }
    }

    // Actualizado para el nuevo formato de Excel
    private async Task<Dictionary<string, List<Dictionary<string, object>>>> ReadExcelDataAsync(
        string excelFilePath, 
        CancellationToken cancellationToken)
    {
        return await Task.Run(() =>
        {
            var empresasData = new Dictionary<string, List<Dictionary<string, object>>>();
            
            using var workbook = new XLWorkbook(excelFilePath);
            var worksheet = workbook.Worksheets.FirstOrDefault();
            
            if (worksheet == null)
                return empresasData;

            // Usar la fila 4 como encabezado según el formato original
            var headerRow = worksheet.Row(EXCEL_HEADER_ROW);
            var headers = headerRow.CellsUsed().Select(c => c.Value.ToString()).ToList();
            
            // Buscar la columna "Nombres" para identificar las empresas
            var nombreColumnIndex = -1;
            for (int i = 0; i < headers.Count; i++)
            {
                var header = headers[i];
                if (header.Contains("Nombres", StringComparison.OrdinalIgnoreCase) && 
                    !header.Contains("Etiqueta", StringComparison.OrdinalIgnoreCase))
                {
                    nombreColumnIndex = headerRow.Cell(i + 1).Address.ColumnNumber;
                    break;
                }
            }

            if (nombreColumnIndex == -1)
            {
                _logger.LogWarning("No se encontró columna 'Nombres' en el archivo Excel");
                return empresasData;
            }

            // Procesar las filas desde EXCEL_HEADER_ROW + 1 (fila 5) en adelante
            foreach (var row in worksheet.RowsUsed().Where(r => r.RowNumber() > EXCEL_HEADER_ROW))
            {
                cancellationToken.ThrowIfCancellationRequested();
                
                // Leer el nombre de la empresa
                var companyName = row.Cell(nombreColumnIndex).Value.ToString()?.Trim();
                
                // Saltar si el nombre está vacío o contiene "Total" o es "Cliente"
                if (string.IsNullOrEmpty(companyName) || 
                    companyName.Contains("Total", StringComparison.OrdinalIgnoreCase) ||
                    companyName.Equals("Cliente", StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                // Crear el diccionario de datos para esta fila
                var rowData = new Dictionary<string, object>();
                foreach (var cell in headerRow.CellsUsed())
                {
                    var columnName = cell.Value.ToString();
                    var columnIndex = cell.Address.ColumnNumber;
                    
                    // Asumiendo que la fila de datos usa las mismas posiciones de columna que el encabezado
                    var value = row.Cell(columnIndex).Value;
                    rowData[columnName] = value;
                }

                // Agregar los datos al diccionario de empresas
                if (!empresasData.ContainsKey(companyName))
                {
                    empresasData[companyName] = new List<Dictionary<string, object>>();
                }
                
                empresasData[companyName].Add(rowData);
            }

            return empresasData;
        }, cancellationToken);
    }

    // El resto del código permanece igual...
    private async Task<GeneratedPdfInfo?> GeneratePdfForCompanyAsync(
        string companyName,
        List<Dictionary<string, object>> data,
        string outputFolder,
        string? templatePath,
        CancellationToken cancellationToken)
    {
        return await Task.Run(() =>
        {
            var fileName = $"Estado_Cartera_{SanitizeFileName(companyName)}_{DateTime.Now:yyyyMMdd}.pdf";
            var filePath = System.IO.Path.Combine(outputFolder, fileName);

            using var writer = new PdfWriter(filePath);
            using var pdf = new PdfDocument(writer);
            using var document = new Document(pdf);

            // Agregar manejador de fondo si se proporciona plantilla
            if (!string.IsNullOrEmpty(templatePath) && File.Exists(templatePath))
            {
                try
                {
                    pdf.AddEventHandler(PdfDocumentEvent.START_PAGE, 
                        new BackgroundImageHandler(templatePath, _logger));
                }                
                catch (Exception ex)
                {                
                    _logger.LogError(ex, "No se pudo cargar la plantilla de fondo: {TemplatePath}", 
                        templatePath);
                }
            }

            // Agregar contenido al PDF
            AddPdfContent(document, companyName, data);

            var fileInfo = new FileInfo(filePath);
            return new GeneratedPdfInfo
            {
                CompanyName = companyName,
                FilePath = filePath,
                GeneratedDate = DateTime.Now,
                FileSize = fileInfo.Length,
                RecordCount = data.Count
            };

        }, cancellationToken);
    }

    private void AddPdfContent(Document document, string companyName, List<Dictionary<string, object>> data)
    {
        // Título principal
        var title = new Paragraph($"ESTADO DE CARTERA - {companyName}")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(18)
            .SetBold()
            .SetMarginBottom(20);
        document.Add(title);

        // Información general
        var info = new Paragraph($"Fecha de generación: {DateTime.Now:dd/MM/yyyy HH:mm}")
            .SetTextAlignment(TextAlignment.CENTER)
            .SetFontSize(12)
            .SetMarginBottom(30);
        document.Add(info);

        if (!data.Any())
        {
            document.Add(new Paragraph("No se encontraron registros para esta empresa."));
            return;
        }

        // Crear tabla con los datos
        var headers = data.First().Keys.ToList();
        var table = new Table(headers.Count);
        table.SetWidth(UnitValue.CreatePercentValue(100));

        // Agregar encabezados
        foreach (var header in headers)
        {
            table.AddHeaderCell(new Cell().Add(new Paragraph(header).SetBold()));
        }

        // Agregar datos
        foreach (var row in data)
        {
            foreach (var header in headers)
            {
                var value = row.ContainsKey(header) ? row[header]?.ToString() ?? "" : "";
                table.AddCell(new Cell().Add(new Paragraph(value)));
            }
        }

        document.Add(table);

        // Resumen
        var summary = new Paragraph($"\nTotal de registros: {data.Count}")
            .SetTextAlignment(TextAlignment.RIGHT)
            .SetFontSize(12)
            .SetBold()
            .SetMarginTop(20);
        document.Add(summary);
    }

    private static string SanitizeFileName(string fileName)
    {
        var invalidChars = System.IO.Path.GetInvalidFileNameChars();
        return new string(fileName.Where(c => !invalidChars.Contains(c)).ToArray())
            .Replace(" ", "_");
    }
}
