using GestLog.Services;
using System;
using System.Threading.Tasks;
using System.IO;
using System.Net.Http;
using System.Collections.Generic;

namespace GestLog.Examples
{
    /// <summary>
    /// Clase de ejemplo que muestra cómo utilizar el servicio de manejo de errores
    /// </summary>
    public class ErrorHandlingExample
    {
        private readonly IErrorHandlingService _errorHandler;

        public ErrorHandlingExample(IErrorHandlingService errorHandler)
        {
            _errorHandler = errorHandler;
        }

        /// <summary>
        /// Ejemplo de uso del manejador de errores para operaciones sincrónicas
        /// </summary>
        public void SyncOperationExample()
        {            // Ejemplo 1: Operación simple sin retorno
            _errorHandler.HandleOperation(() =>
            {
                // Una operación que podría lanzar una excepción
                var data = System.IO.File.ReadAllText("archivo_que_no_existe.txt");
                Console.WriteLine(data);
            }, "Lectura de archivo de ejemplo");

            // Ejemplo 2: Operación con valor de retorno y manejo de error personalizado
            int result = _errorHandler.HandleOperation(() =>
            {
                // Una operación que retorna un valor y podría lanzar una excepción
                return int.Parse("no_es_un_número");
            }, "Conversión de cadena a número", defaultValue: -1);

            // Ejemplo 3: Operación con manejo de error personalizado
            _errorHandler.HandleOperation(() =>
            {
                // Una operación que podría lanzar una excepción
                var divisor = 0;
                var resultado = 100 / divisor; // División por cero
            }, "División matemática de ejemplo", ex =>
            {
                // Manejo personalizado del error
                Console.WriteLine($"Se interceptó un error: {ex.Message}");
                // Aquí podríamos tomar acciones específicas para este tipo de error
            });
        }

        /// <summary>
        /// Ejemplo de uso del manejador de errores para operaciones asincrónicas
        /// </summary>
        public async Task AsyncOperationExampleAsync()
        {
            // Ejemplo 1: Operación asincrónica sin retorno
            await _errorHandler.HandleOperationAsync(async () =>
            {
                await Task.Delay(100); // Simula una operación asincrónica
                throw new InvalidOperationException("Error forzado para demostración");
            }, "Operación asincrónica de ejemplo");

            // Ejemplo 2: Operación asincrónica con retorno            var data = await _errorHandler.HandleOperationAsync(async () =>
            {
                await Task.Delay(100); // Simula una operación asincrónica
                // Una operación que retorna un valor y podría lanzar una excepción
                using var client = new System.Net.Http.HttpClient();
                return await client.GetStringAsync("https://sitio_que_no_existe.com");
            }, "Descarga de datos de ejemplo", defaultValue: "Datos por defecto");
        }

        /// <summary>
        /// Ejemplo de manejo directo de excepciones
        /// </summary>
        public void DirectExceptionHandlingExample()
        {
            try
            {
                // Código que podría generar un error
                var lista = new List<string>();
                var elemento = lista[10]; // Fuera de rango
            }
            catch (Exception ex)
            {
                // Manejar la excepción directamente
                _errorHandler.HandleException(ex, "Acceso a lista", showToUser: true);
            }
        }

        /// <summary>
        /// Ejemplo de suscripción a eventos de error
        /// </summary>
        public void SetupErrorEventHandling()
        {
            // Suscribirse al evento de errores
            _errorHandler.ErrorOccurred += (sender, e) =>
            {
                Console.WriteLine($"Se ha detectado un nuevo error:");
                Console.WriteLine($"ID: {e.Error.Id}");
                Console.WriteLine($"Tipo: {e.Error.ExceptionType}");
                Console.WriteLine($"Mensaje: {e.Error.Message}");
                Console.WriteLine($"Contexto: {e.Error.Context}");
            };
        }
    }
}
